<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Config 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace 命名空间，作用就是对SQL进行分类化管理，理解SQL隔离
注意：使用Mapper代理开发，namespace有特殊的作用
 -->
<mapper namespace="test">
<!-- 在映射文件中配置多个SQL语句 -->
<!-- 通过select执行SQL的查询 
id：用于标识映射文件中的SQL
将来SQL语句会封装到mappedstatement对象中，所以称为statement的id
#{}表示一个占位符
parameterType:输入参数的类型
#{id}其中的id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，那么#{}中的参数名可以任意，可以是value或者其他的名称
resultType:指定SQL输出结果所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象
-->
	<select id="findUserById" parameterType="int" resultType="com.mybatis.po.User">
		select * from user where id=#{id}<!-- id接收输入的参数 -->
	</select>
<!-- 根据用户名称模糊查询用户信息 
resultType表示将单条记录映射成的java对象
${}:拼接SQL串，将接收到的参数的内容不加任何修饰拼接在SQL中,只能使用${value} 拼接符号，没有使用占位符
使用${}拼接可能引起SQL注入select * from user where username like '%' or 1=1 or'%'
-->
	<select id="findUserByName" parameterType="java.lang.String" resultType="com.mybatis.po.User">
	<!-- 把%固定到SQL语句中 -->
		select * from user where username like '%${value}%'
	</select>
<!-- 添加用户
parameterType:输入参数类型，是pojo(包括用户信息)
#{}中指定pojo的属性名，接收到pojo的属性值，mybatis通过OGNL获取对象的属性值
#{id}:id是自增的
通过LAST_INSERT_ID()获取自增的主键,只适用于自增主键
keyProperty:将查询到的主键值设置到parameterType指定对象的id属性
order:执行顺序，想对于insert语句来说的执行顺序，只有在insert语句之后才会执行获取自增主键
resultType:指定结果的类型
将插入数据的主键返回
 -->
	<insert id="insertUser" parameterType="com.mybatis.po.User" >
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select LAST_INSERT_ID()
		</selectKey>
		insert into user(username,birthday,sex,address) value(#{username},#{birthday},#{sex},#{address})
	</insert>
<!-- 使用MySQL的UUID()生成主键 
UUID() 非自增主键的返回
需要将表中id的字段类型改成String，长度设置成35位
首先通过UUID()得到主键，将主键设置到user对象的id属性中
其次在insert执行时，在user对象中取出id属性值
-->
	<!-- <insert id="insertUser" parameterType="com.mybatis.po.User" >
		<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
			select UUID()
		</selectKey>
		insert into user(id,username,birthday,sex,address) value(#{id},#{username},#{birthday},#{sex},#{address})
	</insert> -->
	
<!-- 删除用户
根据用户id删除用户，需要输入id值
 -->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from user where id=#{id}
	</delete>
<!-- 更新用户 
传入用户的更新信息，传入user对象，id必须存在
#{id}:从输入的user中获取id的属性值
-->
	<update id="updateUser" parameterType="com.mybatis.po.User">
		update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
	</update>
</mapper>